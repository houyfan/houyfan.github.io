<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>axios和ajax区别</title>
    <link href="/2023/07/10/axios%E5%92%8Cajax%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/07/10/axios%E5%92%8Cajax%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>axios是通过<a href="https://so.csdn.net/so/search?q=promise&spm=1001.2101.3001.7020">promise</a>实现对ajax技术的一种封装，就像jQuery实现ajax封装一样。<br>简单来说： <a href="https://so.csdn.net/so/search?q=ajax&spm=1001.2101.3001.7020">ajax</a>技术实现了网页的局部数据刷新，axios实现了对ajax的封装。<br>axios是ajax ajax不止axios。</p><h2 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h2><h3 id="ajax："><a href="#ajax：" class="headerlink" title="ajax："></a>ajax：</h3><p>本身是针对MVC的编程,不符合现在前端MVVM的浪潮<br>基于原生的XHR开发(<em>xhr是浏览器提供的JavaScript对象，通过它，可以请求服务器上的数据资源，之前所学的jquery的ajax函数，就是基于xhr对象封装出来的</em>。)，XHR本身的架构不清晰，已经有了fetch的替代方案<br>JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案又不能享受CDN服务</p><h3 id="axios："><a href="#axios：" class="headerlink" title="axios："></a>axios：</h3><p>从 node.js 创建 http 请求<br>支持 Promise API<br>客户端支持防止CSRF<br>提供了一些并发请求的接口（重要，方便了很多的操作）</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
